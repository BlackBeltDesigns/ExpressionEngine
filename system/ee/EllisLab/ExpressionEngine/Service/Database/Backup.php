<?php

namespace EllisLab\ExpressionEngine\Service\Database;

use EllisLab\ExpressionEngine\Service\Logger;

/**
 * ExpressionEngine - by EllisLab
 *
 * @package		ExpressionEngine
 * @author		EllisLab Dev Team
 * @copyright	Copyright (c) 2003 - 2016, EllisLab, Inc.
 * @license		https://expressionengine.com/license
 * @link		https://ellislab.com
 * @since		Version 4.0
 * @filesource
 */

// ------------------------------------------------------------------------

/**
 * ExpressionEngine Database Backup Class
 *
 * @package		ExpressionEngine
 * @subpackage	Database
 * @category	Service
 * @author		EllisLab Dev Team
 * @link		https://ellislab.com
 */
class Backup {

	/**
	 * @var Database\Query Database Query object
	 */
	protected $query;

	/**
	 * @var Logger\File File object object
	 */
	protected $logger;

	public function __construct(Query $query, Logger\File $logger)
	{
		$this->query = $query;
		$this->logger = $logger;
	}

	/**
	 * Runs the entire database backup routine
	 */
	public function run()
	{
		$this->startFile();
		$this->writeDropAndCreateStatements();
	}

	/**
	 * Creates/truncates any existing backup file at the specified path and
	 * inserts a header
	 */
	public function startFile()
	{
		$this->logger->truncate();
		$this->writeSeparator('Database backup generated by ExpressionEngine');
	}

	/**
	 * Writes the DROP IF EXISTS and CREATE TABLE statements for each table
	 */
	public function writeDropAndCreateStatements()
	{
		$tables = $this->getTables();

		$this->writeSeparator('Drop old tables if exists');

		foreach ($tables as $table)
		{
			$this->writeChunk($this->getDropStatement($table));
		}

		$this->writeSeparator('CREATE TABLE statements');

		foreach ($tables as $table)
		{
			$this->writeChunk($this->getCreateForTable($table));
		}
	}

	/**
	 * Writes a chunk of text to the file, Logger class automatically adds a
	 * newline character
	 *
	 * @param	string	$chunk	Chunk to write to the file. Sloth love Chunk.
	 */
	protected function writeChunk($chunk)
	{
		$this->logger->log($chunk);
	}

	/**
	 * Writes a pretty(ish) separator to the file with a given string of text,
	 * usually to mark a new section in the file
	 *
	 * @param	string	$text	Text to include in the separater
	 */
	protected function writeSeparator($text)
	{
		$separator = <<<EOT

--
-- $text
--

EOT;
		$this->logger->log($separator);
	}

	/**
	 * Returns an array of names of tables present in the database
	 *
	 * @return	array	Flat array of table names
	 */
	protected function getTables()
	{
		$tables_result = $this->query
			->query('SHOW TABLES;')
			->result_array();

		$tables = array();
		foreach ($tables_result as $table)
		{
			$table_values = array_values($table);
			$tables[] = $table_values[0];
		}

		return $tables;
	}

	/**
	 * Given a table name, generates a CREATE TABLE statement for it
	 *
	 * @param	string	$table_name	Table name
	 * @return	string	CREATE TABLE statement for the given table
	 */
	protected function getCreateForTable($table_name)
	{
		$create_result = $this->query
			->query(sprintf('SHOW CREATE TABLE `%s`;', $table_name))
			->row_array();

		if ( ! isset($create_result['Create Table']))
		{
			// Complain
		}

		return $create_result['Create Table']."\n\n";
	}

	/**
	 * Given a table name, generates a DROP TABLE IF EXISTS statement for it
	 *
	 * @param	string	$table_name	Table name
	 * @return	string	DROP TABLE IF EXISTS statement for the given table
	 */
	protected function getDropStatement($table_name)
	{
		return sprintf('DROP TABLE IF EXISTS `%s`;', $table_name);
	}
}

// EOF
