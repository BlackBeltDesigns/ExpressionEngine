<?PHP
namespace EllisLab\ExpressionEngine\Model\Entity;

use EllisLab\ExpressionEngine\Core\Validation\Validator;
use EllisLab\ExpressionEngine\Core\Validation\Error\ValidationError;

use EllisLab\ExpressionEngine\Model\Errors;

/**
 *
 */
abstract class Entity {
	private $di = NULL;

	protected static $meta = array();

	public $dirty = array();

	public function __construct(Dependencies $di, array $data = array())
	{
		$this->di = $di;
		foreach ($data as $property => $value)
		{
			if (property_exists($this, $property))
			{
				$this->{$property} = $value;
			}
		}
	}

	public static function getMetaData($key=NULL)
	{
		if (empty(static::$meta))
		{
			throw new \UnderflowException('No meta data set for this entity!');
		}

		if ( ! isset($key))
		{
			return static::$meta;
		}

		return static::$meta[$key];
	}

	/**
	 * Validate the Entity
	 *
	 * Vaildate the entity prior to saving based on validation rules set on 
	 * the {$property}_validation properties.
	 * 
	 * @return	Errors 	An object containing any errors generated by failed
	 * 				validation.  If no errors were generated, then
	 * 				Errors::hasErrors() will return false.
	 */
	public function validate()
	{
		$errors = new Errors();
		// Nothing to validate!
		if (empty($this->dirty))
		{
			return $result;
		}

		$validation_rules = static::getMetaData('validation_rules');
		foreach ($this->dirty as $property => $dirty)
		{
			if ( isset($validation_rules[$property]))
			{
				$validator = $this->di->getValidation()->getValidator();
				if ( ! $validator->validate($validation_rules[$property], $this->$property))
				{
					foreach($validator->getFailedRules() as $rule)
					{
						$errors->addError(new ValidationError($property, $rule));
					}
				}
			}
		}

		return $result;
	}

	/**
	 *
	 */
	public function save()
	{
		// Nothing to save!
		if (empty($this->dirty))
		{
			return;
		}

		$save_array = array();
		foreach ($this->dirty as $property => $dirty)
		{
			$save_array[$property] = $this->{$property};
		}

		$id_name = static::getMetaData('primary_key');
		if (isset($this->{$id_name}))
		{
			ee()->db->where($id_name, $this->{$id_name});
			ee()->db->update(static::getMetaData('table_name'), $save_array);
		}
		else
		{
			ee()->db->insert(static::getMetaData('table_name'), $save_array);
		}
	}

	/**
	 *
	 */
	public function delete()
	{
		$primary_key = static::getMetaData('primary_key');
		if (! isset($this->{$primary_key}))
		{
			throw new ModelException('Attempt to delete an Entity with out an attached ID!');
		}
		ee()->db->delete(static::getMetaData('table_name'), array($primary_key, $this->{$primary_key}));
	}

}
